import numpy as np
import matplotlib.pyplot as plt
import csv  # Para guardar la tabla en CSV

# Definición del sistema de EDOs
def f(t, y):
    y1, y2 = y
    dy1dt = y2
    dy2dt = -2 * y2 - 5 * y1
    return np.array([dy1dt, dy2dt])

# Método de Runge-Kutta de cuarto orden para sistemas
def runge_kutta_4_system(f, t0, y0, t_end, h):
    t_vals = [t0]
    y_vals = [y0.copy()]
    
    t = t0
    y = y0.copy()
    
    print(f"{'t':>10} {'y1':>15} {'y2':>15}")
    print(f"{t:10.4f} {y[0]:15.6f} {y[1]:15.6f}")
    
    while t < t_end:
        k1 = f(t, y)
        k2 = f(t + h/2, y + h/2 * k1)
        k3 = f(t + h/2, y + h/2 * k2)
        k4 = f(t + h, y + h * k3)
        
        y += h * (k1 + 2*k2 + 2*k3 + k4) / 6
        t += h
        
        t_vals.append(t)
        y_vals.append(y.copy())
        
        print(f"{t:10.4f} {y[0]:15.6f} {y[1]:15.6f}")
    
    return np.array(t_vals), np.array(y_vals)

# Función para guardar la tabla en CSV
def save_to_csv(t_vals, y_vals, filename="resultados.csv"):
    with open(filename, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["t", "y1 (posición)", "y2 (velocidad)"])  # Encabezados
        for t, y in zip(t_vals, y_vals):
            writer.writerow([f"{t:.4f}", f"{y[0]:.6f}", f"{y[1]:.6f}"])
    print(f"\nTabla de resultados guardada en '{filename}'")

# Parámetros iniciales
t0 = 0
y0 = np.array([1.0, 0.0])  # y1(0) = 1, y2(0) = 0
t_end = 5
h = 0.1

# Resolver el sistema
t_vals, y_vals = runge_kutta_4_system(f, t0, y0, t_end, h)

# Guardar tabla en CSV
save_to_csv(t_vals, y_vals)

# Solución analítica para comparación
def exact_solution(t):
    return np.exp(-t) * (np.cos(2*t) + 0.5*np.sin(2*t))

# Gráficas
plt.figure(figsize=(12, 5))

# Gráfica 1: Posición y velocidad vs tiempo
plt.subplot(1, 2, 1)
plt.plot(t_vals, y_vals[:, 0], 'b-', label="Posición (RK4)")
plt.plot(t_vals, y_vals[:, 1], 'r-', label="Velocidad (RK4)")
t_exact = np.linspace(t0, t_end, 500)
plt.plot(t_exact, exact_solution(t_exact), 'k--', label="Posición exacta", linewidth=1.5)
plt.xlabel("Tiempo (t)")
plt.ylabel("y")
plt.title("Solución del sistema masa-resorte")
plt.grid(True)
plt.legend()

# Gráfica 2: Espacio de fases
plt.subplot(1, 2, 2)
plt.plot(y_vals[:, 0], y_vals[:, 1], 'g-', label="Trayectoria (RK4)")
plt.xlabel("Posición (y1)")
plt.ylabel("Velocidad (y2)")
plt.title("Espacio de fases")
plt.grid(True)
plt.legend()

plt.tight_layout()
plt.savefig("resorte_amortiguado.png")
plt.show()

# Calcular error
y1_exact = exact_solution(t_vals)
error = np.abs(y1_exact - y_vals[:, 0])
print(f"Error máximo respecto a la solución exacta: {np.max(error):.6f}")
